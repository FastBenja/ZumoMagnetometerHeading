import numpy as np

# To convert excel collum to csv use =TEXTJOIN(",";TRUE;L:L)

# Example raw magnetometer readings (replace with your data)
raw_x = np.array([-6524,-6491,-6534,-6524,-6550,-6558,-6509,-6528,-6532,-6529,-6510,-6536,-6525,-6517,-6537,-6547,-6571,-6566,-6577,-6621,-6644,-6623,-6645,-6663,-6658,-6673,-6709,-6783,-6801,-6780,-6781,-6813,-6808,-6829,-6863,-6907,-6912,-6973,-6978,-7080,-7105,-7178,-7198,-7225,-7248,-7246,-7318,-7350,-7386,-7456,-7429,-7436,-7438,-7493,-7548,-7553,-7607,-7618,-7601,-7628,-7640,-7657,-7701,-7735,-7724,-7774,-7812,-7795,-7857,-7879,-7900,-7915,-7958,-7982,-8039,-8065,-8113,-8155,-8263,-8316,-8369,-8391,-8386,-8426,-8444,-8498,-8517,-8533,-8539,-8535,-8590,-8570,-8576,-8575,-8599,-8611,-8682,-8677,-8689,-8720,-8750,-8743,-8718,-8734,-8669,-8715,-8727,-8728,-8694,-8720,-8716,-8698,-8704,-8688,-8695,-8668,-8681,-8670,-8629,-8624,-8628,-8614,-8584,-8575,-8545,-8517,-8499,-8504,-8460,-8506,-8454,-8401,-8383,-8363,-8345,-8252,-8256,-8178,-8095,-8080,-8029,-7990,-7948,-7877,-7828,-7753,-7709,-7647,-7594,-7551,-7502,-7472,-7420,-7424,-7372,-7309,-7289,-7249,-7224,-7197,-7148,-7073,-7061,-7010,-6989,-6951,-6914,-6912,-6873,-6862,-6858,-6799,-6780,-6706,-6700,-6734,-6680,-6673,-6631,-6621,-6621,-6569,-6561,-6534,-6518,-6500,-6506,-6477,-6477,-6467,-6455,-6512,-6451,-6450,-6464,-6453,-6469,-6472,-6488,-6492,-6481,-6458,-6462,-6473,-6505,-6531,-6557,-6582,-6598,-6624,-6608,-6635,-6645,-6687,-6672,-6673,-6691,-6724,-6735,-6794,-6805,-6836,-6869,-6921,-6924,-6978,-7027,-7070,-7094,-7105,-7157,-7207,-7240,-7294,-7330,-7375,-7391,-7418,-7438,-7467,-7502,-7489,-7510,-7492,-7487,-7500,-7573,-7604,-7630,-7682,-7738,-7722,-7770,-7833,-7878,-7877,-7928,-7988,-7995,-8027,-8072,-8107,-8117,-8134,-8162,-8193,-8233,-8319,-8310,-8326,-8349,-8359,-8373,-8431,-8434,-8450,-8454,-8478,-8543,-8531,-8579,-8625,-8620,-8625,-8650,-8680,-8668,-8656,-8692,-8713,-8689,-8695,-8730,-8716,-8683,-8697,-8678,-8673,-8718,-8701,-8712,-8669,-8662,-8649,-8620,-8600,-8583,-8549,-8532,-8517,-8454,-8457,-8425,-8428,-8384,-8317,-8359,-8257,-8235,-8216,-8166,-8119,-8100,-8015,-7998,-8002,-7931,-7886,-7868,-7833,-7843,-7767,-7673,-7599,-7554,-7446,-7433,-7436,-7356,-7315,-7237,-7156,-7005,-6966,-6957,-6927,-6940,-6931,-6886,-6845,-6859,-6824,-6784,-6748,-6754,-6677,-6682,-6607,-6591,-6592,-6594,-6553,-6509,-6497,-6511,-6485,-6503,-6469,-6467,-6469,-6451,-6449,-6479,-6502,-6510,-6484,-6490,-6483,-6519,-6551,-6569,-6565,-6565,-6609,-6625,-6660,-6668,-6693,-6711,-6775,-6807,-6825,-6842,-6901,-6922,-6936,-6962,-6960,-6980,-7022,-7051,-7076,-7098,-7117,-7115,-7148,-7201,-7180,-7202,-7262,-7285,-7258,-7334,-7335,-7359,-7349,-7314,-7096,-6734,-6445,-6266,-5913,-5301,-9013,-8427,-5639,-8163,-8213,-6815,-6050,-6972,-8180,-7528,-7218,-6980,-8479,-8676,-8880,-9022,-9143,-6137,-6122,-6167,-6125,-6145,-6127,-6182,-6122,-6138,-6131,-6155,-6099,-6142,-6103,-6143,-6136,-6118,-6147,-6128,-6104,-6105,-6090,-6129,-6124,-6113,-6113,-6132,-6165,-6132,-6146,-6130,-6146,-6163,-6127,-6143,-6108,-6135,-6111,-6111,-6145,-6114,-6130,-6114,-6128,-6127,-6134,-6131,-6112,-6080,-6114,-6131,-6120,-6115,-6115,-6155,-6161,-6156,-6147,-6130,-6124,-6145,-6136,-6115,-6106,-6129,-6122,-6120,-6175,-6115,-6142,-6121,-6124,-6144,-6118,-6106,-6144,-6123,-6100,-6120,-6110,-6087,-6155,-6146,-6110,-6108,-6126,-6154,-6132,-6143,-6120,-6131,-6138,-6173,-6138,-6132,-6136,-6151,-6144,-6137,-6144,-6130,-6148,-6159,-6160,-6181,-6184,-6117,-6149,-6133,-6142,-6154,-6130,-6180,-6174,-6170,-6137,-6168,-6167,-6147,-6162,-6132,-6165,-6161,-6141,-6124,-6143,-6166,-6166,-6108,-6150,-6134,-6191,-6184,-6157,-6157,-6163,-6159,-6188,-6177,-6152,-6161,-6145,-6106,-6174,-6139,-6150,-6141,-6117,-6100,-6090,-6151,-6114,-6110,-6095,-6133,-6132,-6133,-6157,-6143,-6140,-6156,-6129,-6132,-6144,-6147,-6121,-6143,-6138,-6182,-6135,-6101,-6120,-6142,-6129,-6159,-6148,-6129,-6146,-6173,-6174,-6157,-6162,-6110,-6134,-6167,-6163,-6146,-6176,-6156,-6156,-6154,-6113,-6111,-6103,-6147,-6159,-6129,-6096,-6116,-6145,-6128,-6118,-6148,-6112,-6154,-6115,-6140,-6142,-6144,-6137,-6128,-6146,-6144,-6163,-6169,-6154,-6142,-6131,-6154,-6189,-6139,-6128,-6139,-6115,-6139,-6117,-6109,-6107,-6129,-6160,-6146,-6149,-6141,-6122,-6102,-6124,-6114,-6125,-6103,-6104,-6106,-6138,-6113,-6095,-6137,-6119,-6132,-6091,-6107,-6093,-6103,-6106,-6102,-6079,-6086,-6085,-6110,-6097,-6114,-6076,-6063,-6098,-6105,-6129,-6110,-6092,-6101,-6083,-6137,-6107,-6077,-6150,-6157,-6136,-6160,-6139,-6146,-6121,-6113,-6108,-6099,-6118,-6117,-6132,-6107,-6123,-6093,-6148,-6141,-6153,-6155,-6140,-6123,-6126,-6138,-6081,-6110,-6108,-6110,-6126,-6102,-6116,-6124,-6133,-6103,-6123,-6127,-6134,-6134,-6126,-6125,-6152,-6180,-6114,-6130,-6090,-6120,-6086,-6105,-6135,-6120,-6148,-6089,-6120,-6113,-6114,-6100,-6119,-6114,-6117,-6124,-6125,-6105,-6105,-6106,-6087,-6100,-6107,-6138,-6123,-6120,-6130,-6126,-6092,-6126,-6143,-6129,-6120,-6114,-6148,-6142,-6142,-6171,-6149,-6145,-6138,-6116,-6087,-6101,-6105,-6109,-6121,-6086,-6123,-6101,-6097,-6110,-6122,-6117,-6085,-6104,-6115,-6119,-6081,-6074,-6096,-6088,-6074,-6098,-6084,-6094,-6093,-6100,-6106,-6106,-6140,-6142,-6120,-6100,-6091,-6082,-6078,-6128,-6073,-6076,-6076,-6093,-6089,-6098,-6107,-6075,-6105,-6138,-6056,-6107,-6105,-6088,-6086,-6095,-6093,-6141,-6111,-6126,-6113,-6103,-6095,-6084,-6094,-6110,-6092,-6081,-6094,-6119,-6114,-6114,-6099,-6128,-6113,-6112,-6104,-6078,-6088,-6141,-6100,-6086,-6105,-6088,-6058
])  # Replace with your X data
raw_y = np.array([4388,4379,4351,4311,4278,4270,4212,4163,4126,4134,4111,4080,4119,4095,4092,4057,4010,4002,3944,3959,3898,3898,3904,3844,3856,3807,3784,3742,3734,3746,3743,3719,3721,3707,3721,3646,3697,3645,3612,3590,3596,3550,3560,3573,3560,3583,3575,3561,3549,3584,3569,3539,3563,3551,3581,3598,3585,3560,3596,3604,3566,3580,3614,3608,3615,3641,3671,3652,3685,3695,3685,3698,3699,3722,3752,3759,3771,3839,3899,3931,3955,3978,4015,4010,4045,4072,4102,4132,4136,4137,4184,4215,4235,4215,4311,4329,4401,4453,4456,4495,4533,4564,4631,4626,4673,4732,4743,4769,4743,4803,4832,4867,4856,4901,4924,4927,4952,4969,5028,5034,5046,5088,5093,5133,5141,5181,5196,5228,5216,5284,5306,5296,5309,5299,5357,5385,5401,5386,5416,5442,5436,5442,5438,5424,5429,5439,5464,5446,5407,5390,5399,5423,5419,5387,5369,5341,5326,5310,5309,5300,5296,5250,5224,5195,5143,5126,5147,5081,5082,5062,5024,4999,4931,4942,4914,4907,4831,4817,4794,4751,4713,4702,4641,4636,4600,4554,4519,4468,4432,4397,4371,4305,4244,4242,4217,4201,4180,4172,4114,4128,4073,4076,4041,3996,3985,3941,3903,3886,3883,3826,3835,3809,3846,3789,3761,3775,3743,3735,3684,3680,3652,3642,3656,3644,3612,3582,3570,3566,3599,3543,3553,3560,3535,3547,3520,3550,3549,3521,3521,3536,3549,3513,3539,3534,3516,3553,3545,3596,3585,3601,3614,3634,3604,3598,3642,3679,3686,3688,3699,3704,3734,3755,3770,3772,3804,3821,3854,3866,3916,3904,3938,3942,3947,3977,4022,4054,4079,4135,4140,4172,4189,4222,4269,4292,4353,4388,4429,4475,4504,4563,4576,4619,4681,4693,4730,4766,4761,4769,4797,4817,4864,4889,4933,4981,5005,5029,5058,5064,5151,5165,5180,5199,5225,5240,5250,5290,5295,5291,5363,5367,5331,5392,5373,5360,5392,5380,5398,5392,5400,5377,5371,5409,5406,5380,5414,5335,5368,5358,5319,5300,5251,5238,5137,5144,5098,5082,5060,5070,5041,5044,5025,4988,4949,4964,4908,4851,4811,4744,4724,4681,4667,4614,4551,4539,4485,4431,4377,4350,4276,4300,4275,4215,4169,4118,4093,4073,4103,4017,3999,3916,3917,3912,3885,3838,3823,3795,3747,3737,3725,3695,3678,3670,3653,3644,3627,3611,3629,3630,3572,3554,3559,3592,3550,3549,3551,3571,3552,3565,3526,3556,3550,3540,3519,3518,3541,3533,3518,3498,3632,3899,4310,4563,4882,2862,4303,3971,4904,4058,4126,3954,4132,2946,3328,3427,3407,2996,3125,2758,2585,2812,3203,3235,3249,3232,3265,3253,3239,3228,3221,3213,3215,3221,3237,3209,3246,3221,3214,3240,3232,3244,3240,3254,3244,3246,3223,3267,3242,3233,3214,3227,3223,3244,3238,3247,3247,3258,3249,3238,3242,3225,3252,3256,3274,3243,3232,3241,3225,3237,3267,3256,3228,3228,3206,3238,3246,3241,3224,3244,3242,3233,3264,3236,3252,3241,3233,3239,3230,3239,3251,3235,3244,3218,3256,3260,3243,3241,3276,3285,3257,3254,3249,3254,3246,3237,3265,3254,3276,3272,3262,3266,3262,3285,3256,3225,3277,3242,3240,3233,3249,3247,3252,3227,3250,3264,3258,3252,3256,3274,3239,3256,3240,3245,3260,3269,3250,3238,3302,3297,3289,3275,3264,3268,3280,3291,3275,3272,3268,3264,3247,3266,3270,3275,3245,3248,3254,3264,3267,3252,3252,3241,3233,3246,3268,3240,3266,3256,3244,3277,3255,3329,3271,3254,3229,3250,3232,3269,3243,3262,3274,3277,3242,3237,3266,3274,3270,3271,3271,3266,3239,3244,3239,3236,3265,3239,3225,3218,3229,3204,3255,3235,3242,3261,3278,3261,3253,3267,3235,3241,3234,3268,3248,3262,3279,3255,3245,3281,3298,3291,3276,3300,3270,3292,3269,3285,3255,3289,3271,3246,3264,3267,3272,3287,3284,3276,3300,3275,3253,3252,3280,3280,3304,3276,3283,3311,3291,3284,3287,3283,3300,3287,3268,3276,3262,3260,3276,3272,3271,3261,3221,3247,3249,3237,3238,3237,3254,3284,3237,3253,3274,3260,3260,3228,3269,3239,3241,3254,3259,3285,3242,3281,3279,3266,3255,3259,3261,3281,3266,3284,3274,3232,3252,3249,3249,3250,3242,3246,3269,3235,3255,3239,3252,3282,3237,3277,3247,3260,3273,3257,3257,3267,3249,3263,3271,3257,3281,3285,3267,3244,3236,3252,3226,3232,3245,3296,3260,3241,3267,3282,3265,3290,3250,3253,3263,3284,3251,3265,3250,3278,3272,3262,3277,3278,3248,3275,3274,3251,3266,3260,3260,3259,3279,3276,3252,3264,3266,3250,3236,3276,3263,3251,3277,3258,3238,3237,3270,3246,3269,3261,3269,3256,3256,3245,3234,3243,3239,3259,3242,3304,3246,3269,3258,3253,3260,3238,3273,3261,3253,3277,3272,3258,3251,3240,3261,3272,3276,3275,3280,3279,3239,3260,3281,3245,3270,3242,3230,3247,3229,3264,3238,3240,3261,3246,3288,3256,3255,3256,3268,3277,3259,3266,3250,3286,3233,3246,3258,3249,3246,3266,3252,3255,3229,3283,3269,3260,3253,3280,3272,3264,3246,3257,3270,3271,3264,3263,3307,3279,3314,3277,3274,3276,3286,3306,3281,3300,3283,3237,3279,3298
])  # Replace with your Y data

# Step 1: Center the data
mean_x = np.mean(raw_x)
mean_y = np.mean(raw_y)
centered_x = raw_x - mean_x
centered_y = raw_y - mean_y

# Step 2: Compute the covariance matrix
cov_matrix = np.cov(centered_x, centered_y)

# Step 3: Perform eigenvalue decomposition
eigenvalues, eigenvectors = np.linalg.eig(cov_matrix)

# Step 4: Compute the scaling matrix
scaling_matrix = np.diag(1.0 / np.sqrt(eigenvalues))

# Step 5: Compute the transformation matrix
transformation_matrix = scaling_matrix @ eigenvectors.T

print("Offset X:", mean_x)
print("Offset Y:", mean_y)
print("Transformation Matrix:")
print(transformation_matrix)
